from aiogram import Router, types, Ffrom aiogram.filters.state import StateFilterfrom aiogram.fsm.context import FSMContextfrom app.utils.callback_data import MainMenuCallbackData, MainMenuAction, ChooseLanguageAction, \    ChooseLanguageCallbackData, DetectModelCallbackData, DetectModelActionfrom app.utils.states import DetectStateGroupfrom app.keyboards.inline import (inline_main_menu, inline_new_detect, inline_new_detect_model_chevrolet,    inline_new_detect_name_model_jetour, inline_new_detect_name_model_byd, inline_new_detect_name_model_kia)from app.utils.functions import parse_carrouter = Router()last_bot_message = None@router.callback_query(ChooseLanguageCallbackData.filter(F.action == ChooseLanguageAction.UZB))async def main_menu_handler(update: [types.CallbackQuery, types.Message], state: FSMContext):    global last_bot_message    if isinstance(update, types.CallbackQuery):        callback_query = update        if last_bot_message:            await last_bot_message.delete()        last_bot_message = await callback_query.message.answer(            f"Asosiy Menu",            reply_markup=inline_main_menu())        await state.set_state(DetectStateGroup.main_menu)        # await state.get_state()# @router.message(StateFilter(DetectStateGroup.model_name))@router.callback_query(MainMenuCallbackData.filter(F.action == MainMenuAction.NEW_DETECT))async def new_detect_handler(callback_query: types.CallbackQuery, state: FSMContext):    global last_bot_message    if last_bot_message:        try:            await last_bot_message.delete()        except Exception as e:            print(f"Xabarni o'chirishda xato: {e}")    last_bot_message = await callback_query.message.edit_text("Birini tanlang!", reply_markup=inline_new_detect())    await state.set_state(DetectStateGroup.main_menu)@router.callback_query(DetectModelCallbackData.filter(F.action == DetectModelAction.CHEVROLET))async def detect_model_name_handler(callback_query: types.CallbackQuery, state: FSMContext):    await callback_query.message.edit_text("Modellardan birini tanlang!", reply_markup=inline_new_detect_model_chevrolet())    await state.set_state(DetectStateGroup.model_name)@router.callback_query(DetectModelCallbackData.filter(F.action == DetectModelAction.JETOUR))async def detect_model_name_handler(callback_query: types.CallbackQuery, state: FSMContext):    await callback_query.message.edit_text("Modellardan birini tanlang!", reply_markup=inline_new_detect_name_model_jetour())    await state.set_state(DetectStateGroup.model_name)@router.callback_query(DetectModelCallbackData.filter(F.action == DetectModelAction.BYD))async def detect_model_name_handler(callback_query: types.CallbackQuery, state: FSMContext):    await callback_query.message.edit_text("Modellardan birini tanlang!", reply_markup=inline_new_detect_name_model_byd())    await state.set_state(DetectStateGroup.model_name)@router.callback_query(DetectModelCallbackData.filter(F.action == DetectModelAction.KIA))async def detect_model_name_handler(callback_query: types.CallbackQuery, state: FSMContext):    await callback_query.message.edit_text("Modellardan birini tanlang!", reply_markup=inline_new_detect_name_model_kia())    await state.set_state(DetectStateGroup.model_name)@router.callback_query(StateFilter(DetectStateGroup.model_name))async def detect_model_name_mark_handler(callback_query: types.CallbackQuery, state: FSMContext):    await callback_query.message.answer("ðŸ”Ž")    cars = parse_car(callback_query.data[18:])    for car in cars:        # print(car)        result_text = (            f"Model: {car['model']}\n"            f"Narxi: {car['price']}\n"            f"E'lon sanasi: {car['Created_at']}\n"            f"Yili: {car['year']}\n"            f"KM: {car['km']}\n"            f"karobka: {car['karobka']}\n"            f"Rangi: {car['color']}\n"            f"fuel: {car['fuel']}\n"            f"Holati: {car['status_car']}\n"            f"Link: https://www.olx.uz{car['link']}"        )        await callback_query.message.answer(result_text)    await state.set_state(DetectStateGroup.parse_model)## @router.callback_query(StateFilter(DetectStateGroup.parse_model))# async def detect_model_name_mark_handler(callback_query: types.CallbackQuery, state: FSMContext):#     await callback_query.message.answer(f"ouu yeahh, boom! \n, Primes")##     # await state.set_state(DetectStateGroup.parse_model)